name: Functional Tests

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
      - '!checkvalgrind**'

concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
   TEST_IMAGE_NAME: telefonicaiot/fiware-orion:ci

jobs:
  functional:
    runs-on: ubuntu-22.04
    continue-on-error: true

    services:
      mongodb:
        image: mongo:8.0
        ports:
          - 27017:27017

    name: functional - ${{ matrix.payload.name }}

    strategy:
      matrix:
        payload:
          - { name: 'batch 1 - cache', range: '-e FT_FROM_IX=0 -e FT_TO_IX=300' }
          - { name: 'batch 2 - cache', range: '-e FT_FROM_IX=301 -e FT_TO_IX=600' }
          - { name: 'batch 3 - cache', range: '-e FT_FROM_IX=601 -e FT_TO_IX=900' }
          - { name: 'batch 4 - cache', range: '-e FT_FROM_IX=901 -e FT_TO_IX=1200' }
          - { name: 'batch 5 - cache', range: '-e FT_FROM_IX=1201' }
          - { name: 'batch 1 - no cache', range: '-e CB_NO_CACHE=ON -e FT_FROM_IX=0 -e FT_TO_IX=300' }
          - { name: 'batch 2 - no cache', range: '-e CB_NO_CACHE=ON -e FT_FROM_IX=301 -e FT_TO_IX=600' }
          - { name: 'batch 3 - no cache', range: '-e CB_NO_CACHE=ON -e FT_FROM_IX=601 -e FT_TO_IX=900' }
          - { name: 'batch 4 - no cache', range: '-e CB_NO_CACHE=ON -e FT_FROM_IX=901 -e FT_TO_IX=1200' }
          - { name: 'batch 5 - no cache', range: '-e CB_NO_CACHE=ON -e FT_FROM_IX=1201' }

    steps:
      - uses: actions/checkout@v2

      - name: Run Mosquitto container with authenticated user
        # Why don't to use a service for this (as moquitto-extra above)? It would be the desirable solution, but I haven't able to
        # configure volumes properly for it (the mosquitto container as service has problems to get the configuration files). Feedback welcome! :)
        run: docker run -d --name mosquitto -p 1883:1883 -v $(pwd)/test/functionalTest/mosquittoConf:/mosquitto/config:ro eclipse-mosquitto:2.0.11

      - name: Run Extra Mosquitto container used in multibroker tests
        # Note we are reusing the same volume (although the extra broker does not require authenticated user). We use a service in the past
        # to implement this (using eclipse-mosquitto:1.6.15) but in eclipse-mosquitto:2.0.11 it seems something in the internal configuration
        # has changed and it doesn't work if we don't provide the configuration files in the volume. Again, feedback is welcome! :)
        run: docker run -d --name mosquitto-extra -p 1884:1883 -v $(pwd)/test/functionalTest/mosquittoConf:/mosquitto/config:ro eclipse-mosquitto:2.0.11

      - name: Run Kafka container (KRaft mode)
        run: |
          docker run -d \
            --name kafka \
            -p 9092:9092 \
            -e CLUSTER_ID=kafka-docker-cluster-1 \
            -e KAFKA_NODE_ID=1 \
            -e KAFKA_BROKER_ID=1 \
            -e KAFKA_LISTENER_SECURITY_PROTOCOL_MAP='CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT' \
            -e KAFKA_ADVERTISED_LISTENERS='PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092' \
            -e KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1 \
            -e KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=0 \
            -e KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1 \
            -e KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1 \
            -e KAFKA_PROCESS_ROLES='broker,controller' \
            -e KAFKA_CONTROLLER_QUORUM_VOTERS='1@kafka:29093' \
            -e KAFKA_LISTENERS='PLAINTEXT://:29092,CONTROLLER://:29093,PLAINTEXT_HOST://:9092' \
            -e KAFKA_INTER_BROKER_LISTENER_NAME='PLAINTEXT' \
            -e KAFKA_CONTROLLER_LISTENER_NAMES='CONTROLLER' \
            -e KAFKA_LOG_DIRS='/tmp/kraft-combined-logs' \
            -e KAFKA_AUTO_CREATE_TOPICS_ENABLE='true' \
            -e KAFKA_DELETE_TOPIC_ENABLE='true' \
            confluentinc/cp-kafka:7.4.0

          # Esperar a que Kafka est√© listo
          docker exec kafka bash -c 'for i in {1..20}; do if kafka-broker-api-versions --bootstrap-server localhost:9092; then exit 0; fi; sleep 5; done; exit 1'

      - name: Run functional test
        run: |
          docker run  --network host -t --rm -e REPO_ACCESS_TOKEN=${{ secrets.REPO_ACCESS_TOKEN }} ${{ matrix.payload.range }} -v $(pwd):/opt/fiware-orion ${{ env.TEST_IMAGE_NAME }} build -miqts functional
